NOTE TO ANYONE BUT ME READING THIS FILE:

THIS MAY NOT BE THE FINAL PRODUCT. ALL IS LIABLE TO CHANGE.

THIS IS MY SCRATCH PAD FOR IDEAS / EXPOSING MY INNER WORKINGS.

-------------------------------------------------------------------
----------------------------- Index -------------------------------
-------------------------------------------------------------------
Normal progress
    1. Script demonstration [DONE]
    2. Working Code [DONE][SHOWSTOPPING BUG]
    3. Better codebase, working code [DONE] (version 0.1)
    4. Individual element all commands [DONE] (version 0.2)
    
Player QOL
    - PR
    - Stability
    - Workflow
        -- BP versatility
        -- Undo/redo

Innards
    - DEV QOL
    - Code Quality
    - Testing
    - Optimization
        
Big pieces
    - Tile editing?!?
    - Left Side GUI
    - Side GUI for blueprinting anything available to craft (but not necessarily crafted, or built yet)
    - Overlay GUI
        --? Extensible blueprints
    - Another dimension

-------------------------------------------------------------------
Blueprint editing!!!
-------------------------------------------------------------------
"E" locks player out of inventory effectively :/


-------------------------------------------------------------------
Tech Debt: 

Tidy {} touples passing?
Tidy away blueprint handling from Api?

-------------------------------------------------------------------
Known Issues:

[Stability]
- game crashes on "add" non-blueprint?
- game crashes on "add" Q-select
- game crashes a lot (need to implement pcalls)
Bug:
Open blueprint for editing - don't make a selection - click lock anchor
game crashes.

[Player QOL]
There's a weird ordering in the controls now
 - Find out why 

[Workflow]
E kinda closes blueprint even if I push to UI
    Better to have Cancel on same button as E "inventory" (close interface)
    or on Start Editing N (currently opens inventory)?
    Swap function??
    give players choice? Ask community?
    Allow to bind separately???

[Workflow]
- destroys anything in your cursor when pressing N a second time to switch to inventory (workflow)
    (use player "changes cursor" event, to disable deleting?)

[Workflow]
If you rotate a blueprint, and then set an anchor point, the blueprint returns to its original orientation
Stumpyofpain - Furthermore, blueprints disappear from the tool belt when I change the anchor.
    Find out where/how game saves "rotated blueprint" in hand. Or where to find/edit that rotation value.
    Reason: upgrade "anchor to point" feature.
    Impossible. It classes it as "rendering". Which is inaccessible to mods. 
    Fix?: Prevent game rotating blueprints, and rotate contents myself.


[Optimization]
- anchor points lag on large blueprints (ie: JohnyDL's 199x199 solar array, 2 second lag)
-------------------------------------------------------------------
----------------------- STAGE X - CEMENTING -----------------------
-------------------------------------------------------------------

Fix bugs.
Increase stability.
 - pcall error catching at API level (players don't immediately crash)
Create one E2E test for each "path"
Create more E2E tests
Pay tech debt

-------------------------------------------------------------------
---------------------- STAGE X - ALIGNMENT ------------------------
-------------------------------------------------------------------

Research selection, and collision boxes
Squeak through
Origins... etc.

LuaEntityPrototype.collision_box - check it out (and selection_box)
- Collision_box = start everything on the grid correctly, and change "increment" from 0.5 to 1
-- Detection if element is "on grid" when you start moving it. If not, move to grid first.
Collision box ceil should compensate for mods making them smaller, like "squeaak through"?
USe selection box??
"Origin" seems to be top left of entity?!?

Collision box -> grid:
    Odd side = -0.5
    Even side = 0

"origin" of item in middle of first block it's in???
https://wiki.factorio.com/Types/AABB

game -> entity_prototypes :: custom dictionary string â†’ LuaEntityPrototype [Read-only]


https://wiki.factorio.com/Prototype/Entity

tile_width
Type: Types/unsigned
Default: calculated by the collision box width rounded up.
Used to determine how the center of the entity should be positioned when building (unless the offgrid flag is specified). When the tile width is odd, the center will be in the center of the tile, when it is even, the center is on the tile transition.

tile_height
Type: Types/unsigned
Default: calculated by the collision box height rounded up. 

power poles = 0.7 gap (doable)


ADD correctly

Rotate individual oblong correctly.

Change default move to 1, shift move to 5?


-------------------------------------------------------------------
------------------ STAGE X + 1 - FULL BLUEPRINT -------------------
-------------------------------------------------------------------

"Copy" = create carbon copy of whole blueprint, as item (ctrl-C, applies to selection - re-insert or whole BP)
"Rotate"
"Mirror"

-------------------------------------------------------------------
-------------------- STAGE ??? - ORIGIN/QOL -----------------------
-------------------------------------------------------------------

Requirements:
Entities? Overlay?

try adding as tile?

Unplaceable entities. (impossible?) -- might have to be put off until overlay?
can we make non-placeable entities (markers), which stay in the BP, but aren't put down in the ghost? (less important)
If existing invisible, unplaceable object, remove before calculating origin


"Visual indicator" of origin? (mini anchor?)
    - removed before calculating bounding box?
    - not placeable
    - no collision
    
DEV QOL, and Player QOL
Editing View nice:
    Lab tiling unplaceable = "grid" (within "bounding box" of BP)
    Add "modifying" tile over existing? (seethrough??) / replace existing with coloured = existing tiling + grid
    Unplaceable "lab tiling" inside blueprints, behind "bounding box" of BP?????? (grid)!!! (along with anchor HIGH QOL improvement!)

-------------------------------------------------------------------
--------------------------- Player QOL ----------------------------
-------------------------------------------------------------------

Mod options?:
    - copy options: 
		-- To origin?
		-- Directly over
		-- Offset bottomleft by 1 tile?
        
Mod Options: 
    Settable "move by X" and "Shift move by X" distances
        
Way to "disable" keybind per-key?

Write own entity reviver?
while running along, hold F to "revive" entities under the mouse?
on selection change, if button held down ???, and within player build area, and selection = ghost, and player has item in inventory, then revive ghost, and remove 1 item from player's inventory.

-------------------------------------------------------------------
----------------------------- Workflow ----------------------------
-------------------------------------------------------------------

storage: command to CONFIRM "cancel editing"
    e again (before another action) = cancel, restore original blueprint
    Hold original blueprint in store!!
cleared on every other command
delete - also confirm command?

Known issue:
- Deletes not-necessarily-blueprint from hand
Fix?:
Have to add blueprint equivalence function?!?
    - Add "hashcode" function for each object (serpent -> string) (is this even possible on game AND my types?)
    - Deep equivalence on tables? (similar to above. Messier?, but 100% doable.)
    - Check name, first 5 elements, last 5 elements? (hack job) (we don't need performance here right now?)
    - Just name? (NOPE!!! blanks = dangerous)
    /c game.player.print(serpent.line(game.player.cursor_stack.get_blueprint_entities(), {comment = false}))
    look more into blueprint string???
QUICK FIX:
    use player "changes cursor" event, to track what's in the hand.

- Can put editing blueprints away to inventory
    STYLE CHOICE:
    QUICK: store "editing" blueprint in ether
        potential to lose info
        have to write extra function to zap bp on deselect
        editing menu closes on deselect
        performance cost?
    pros: faster / less logic to implement/more "compatible". (winner winner chicken dinner)

    finishing editing:
    click tick while editing = keep item in hand (fast way), or use smart pipette to pick item up from inventory if not already in hand (good way)
    
Compatibility / better command recognition:
- Doesn't conflict with Dollies
Conditions for "move": Opened gui is type 5, and selection(hand) = none?
"is_editing" check checks for blueprint editing AND Bpedit screen open (5), AND selection(hand) = none??

Blueprint Destruction:
- Q = clear selection (destroy small blueprints?)
Auto-clear all empty, or one-entity blueprints from hand/in inventory (optional?) (-1 = don't delete, 0 = delete with 0, 1 = delete with only 1... etc?)
Garbage can asks to confirm deleting when clicking with blueprint with more than one entity in hand
"clearing" small blueprint from pipette (manually?) = deletes? warn? setting?

Known issue: 
If you rotate a blueprint, and then set an anchor point, the blueprint returns to its original orientation
Stumpyofpain - Furthermore, blueprints disappear from the tool belt when I change the anchor.
Solution?:
Prevent game rotating blueprints, and rotate contents myself.

-------------------------------------------------------------------
-------------------------- BP Versatility -------------------------
-------------------------------------------------------------------

WHY N ?!?
N -> "New"/edit/iNventory

Blueprint Creation:
- N with nothing = start new "empty" blueprint.
- N with not editing & selection(hand) = start new blueprint with item

TAKE ALL THE THINGS:
- Placing real (non-blueprint) things places them in to blueprint!!
- Shift-N with nothing in hand (while editing), will pick selection up in to blueprint!
- Make sure Q-N, and Q-Shift+N work!!! (not yet)
- After switching to inventory (N from blueprint) next click auto-adds that.

open screen(editing_blueprint)
Check if blueprint on cursor = one was editing? -> edit
Search for old blueprint in inventory -> edit??, or ensure zapped on deselect (cache inventory location for easier equivalence lookup???, and check)
If not -> create new, and hold in cursor
If fails -> tell player "NO SPACE"

N -> if editing & screen not open = open screen(editing_blueprint)
if editing & screen open = ??? ((cancel, and confirm?) - stop player receiving blueprint in hand they weren't editing.)          (add bp? too overloaded?) ("complete editing"? existing command.)  (start editing new bp? - still dangerous/overloaded) (do nothing? - not bad per se)
if not editing, and BP in hand = start editing Bp
if not editing, no BP in hand, and mouseover_selection = copy mouseover_selection, and start editing
if not editing, no BP in hand, no mouseover_selection = start editing new (empty) BP?

-------------------------------------------------------------------
------------------------ Multiple Selection -----------------------
-------------------------------------------------------------------

Editable options: How far do move/shiftmove an item (0.5/1/2/5/6...)

- Allow full blueprint to blueprint addition (multiple entities & selected at once)
    
Shift-Tab = "lock in" existing selection

Implement matrix classes with Lua matrix??

ROTATION:
    /c game.player.print(game.player.cursor_stack.get_blueprint_entities()[1].position) = -0.5, -0.5 for power pole?!? and roboport[[[EVEN SIZE BASE]]]. But assembly machine, and belt, track = 0,0 [[[ODD SIZE BASE]]]... splitter = 0, -0.5? [[[ODD-EVEN]]]
    - take into account when placing on blueprints, then just move increments of 1!!!
    - have to account for in rotation!!
    - Rotation: Find centre of group. Remove "centre" from all items. Add "centre" back. (-0.5 adjustment back and forward for odd side?)
    - Rotation+ Nothing selected(bp) = rotate all from origin.
    - check hand for rotation of item before placing?


    Rotation dependent on collision_box
    collision box = back end? (cache, ie: __index = populate(game.getbasesize))

    "group centre"
    (get_furthest_left_x + get_furthest_right_x) / 2 = centre_x (not weighted)
    (get_furthest_up_y + get_furthest_down_y) / 2 = centre_y (not weighted)
    respecting odds?

    Save "commutative transformation", rather than each state? not sure how move -> rotate -> move would work??

    Matrices for rotation & reflection (not interested in stretching, and shearing)
    SVG Rotation CW (and 90 deg):
    (cos %, -sin %)(x) = (0, -1)(x)
    (sin %,  cos %)(y) = (1,  0)(y)
    SVG Rotation CCW (and 90 deg):
    ( cos %, sin %)(x) = ( 0, 1)(x)
    (-sin %, cos %)(y) = (-1, 0)(y)
    
    
Reflection/Mirroring:
    y axis:
    (-1, 0)
    ( 0, 1)
    x axis:
    (1, 0)
    (0,-1)

    Mirroring works outside of "UI", by changing BP in hand.

-------------------------------------------------------------------
-------------------------- Undo / Redo ----------------------------
-------------------------------------------------------------------
Undo/redo (ctrl-z, ctrl-y)
- 10 levels of undo?
If: last changed = selection, and selection changed - undo MERGE
If last changed = entities, and entities change - undo MERGE
otherwise, new entry.

    e = cancel (restore blueprint from before started editing)
-------------------------------------------------------------------
--------------------------- Tile Editing --------------------------
-------------------------------------------------------------------
Key X:
Tile editing
- switch from entity selection to tiles

Inner tiles keyed by position, cycle through with next(tile_map, previous)

-------------------------------------------------------------------
------------------------------ PR ---------------------------------
-------------------------------------------------------------------

Create more succinct "goals"? (than this file)

auto generated files are nicely ordered?

-------------------------------------------------------------------
------------------------- Optimization ----------------------------
-------------------------------------------------------------------

Types class / type handling & checking (strict type vs no check (forced check for dao and frontend?)
- "userdata" Test&Leave until inheritance & custom typecheck

recalculate bounding box only on add/remove entity?? (and "move" bounding box with the rest of entities by vector)

"Blueprint string" refers to blueprint in original orientation, with anchor at centre.

Known issue:
- anchor points lag on large blueprints (ie: JohnyDL's 199x199 solar array, 2 second lag)
Solution?:
Profile first, to see where lag is happening.

suggestions:
matrix multiplication.
restructure data
Stop unnecesarry setting (where tables/pointers are already in place)
-------------------------------------------------------------------
-------------------------- Code Quality ---------------------------
-------------------------------------------------------------------

replace "has no selection" in "blueprint edit actions" with one in store.

Stop mixing concepts array-table for blueprint entities (always array)
On import from game - verify array position = element number! (otherwise, new array -> wrap -> correct)
    
Reverse order of DAOs retrieval??

Separation of concern between Object (inherited), and Class (way of inheritence)

checkstyle/pmd?? auto fix??
https://pmd.github.io/

Testing Code coverage metric?

Inheritance of metafunctions
    mt = {}
    if parent ~= nil then 
        mt = ??copy(getmetatable(parent))
    end
    mt[__inxed] = parent
    setmetatable(this, mt)
    
    Inherit tostring metamethod

write end2end tests?? faketorio??

Explicit Array class?
- Newindex to limit explicit arrays???

-------------------------------------------------------------------
---------------------------- Testing ------------------------------
-------------------------------------------------------------------

end_to_end tests, prevent use of "os"??

Mocker Spies? (Busted has them)
Wrap class. Wrap method. Add "calls" Array, which stores arguments as a table. #Array = number of times called.
Use Busted?

fix error inconsistently failing to clean target (after manually accessed by windows)

CI with AppVeyor/Travis/CircleCI?

-------------------------------------------------------------------
----------------------------- DEV QOL -----------------------------
-------------------------------------------------------------------

separate "deploy" option in script. Only zip then, and copy zip to mods folder instead of linking.
sets "log debug" to false
local sets "log debug" to true
File in resources to control?? nah. Generated??

Build Script Ideas:
    try - catch around "clearing" in build - let dev see what happened
    Move mod info to src/main/resources, and use that for build?
    Build number = input to py script
    Local version = don't use version (more difficult to deploy from local)
    if versioning, don't local?? (no, it's not commutative)
    
Position and vector operations with + - / *

Python scans /test for Test classes
- python test class finder excludes "userdata" test for now.

Repos?:
    break up repos in to 
    -IT
    -bpedit & test
    -lib & test
    -core & test
    -core mocks?? (mock userdata)
    reason: use mock userdata in test, and IT
    use core in main,test, and IT

2D orthogonal vector = rotate 90 degrees (mirror in direction, rather than in line through direction)

Add Paypal

Like the drugs one has patreon XD
"If you wanna give me something as a 'thank you'/'I appreciate this'/'do more of this'.
Not gonna lie, it's probably gonna go on video games, and booze(aka: coding fuel)."

Want to give, but don't have money? No problem! Send me an email, or message telling me how much you like my mod. I'll really appreciate it :). Looking for, and reporting bugs is another good way to contribute! (if you have time)
Don't want to, or don't feel like it? No problem! You're free to be you man :).

Normal behaviour: version = "local", and tries to post to appdata/factoriomods. links up.
build -t = just tests
build -x = no tests
build -r # = release & number. 
Checks changelog for corresponding entry 
- Deploys zip instead of "linked dir" to factorio mods
- don't create zip unless "releasing"

Bundling errors? / catch & rethrow for extra info?
-------------------------------------------------------------------
----------------------------- Unsure ------------------------------
-------------------------------------------------------------------

Maybe locked: Some kind of GUI? (more investigation required)


Tooltip to display which object is being moved?
- Add information on which entities are "selected".
- Upgrade "selection" information to include multiple entities.
- Upgrade selection customization to allow selecting multiple entities

eradicator: (on visualising selection)
white boxes graphics are available somewhere from the base graphics files. Now if you made an new "simple-entity" prototype for each corner then you could place those into the blueprint around the corners of the selected entity

-------------------------------------------------------------------
-------------------------------------------------------------------
Locked: Left side GUI = double for keybinds!!!
-------------------------------------------------------------------
-------------------------------------------------------------------

Generate new gui/bp???
Easier for new users to access full functionality

mod options:
hide side menu
side menu options:
display "original" blueprint editor (game) (with overlay??)
replacement (if I code one to replace overlay)
otherworld

-------------------------------------------------------------------
-------------------------------------------------------------------
Locked: OVERLAY GUI
-------------------------------------------------------------------
-------------------------------------------------------------------
Generate new gui/bp???
Overlay? going over actual blueprint - how to line it up??? (partly - get lowest, and highest X and Y points - including item size = canvas "compression") (partly resolution / allow player to align it??)
Mark where mouse clicks, and stack in hand (invisible gui element aligned to existing gui?)

Click-to-add
Possible to select existing element??? (that would be pretty awesome)
Drill down through GUIs again, to see if we can find/modify existing GUI for editing :/
If not, create "provisional" overlay in central - check if that removes blueprint editing screen?
Develop algorithm for placing location of item on blueprint?!?!?!?!?
Create "Sprite" - crosshair (making it look like a grid pattern), and align according to algorithm - then when GUI ELEMENT clicked, you can tell which element - set position in blueprint
get all signals, and make a menu with them, for inserting stuff??

- turn on grid pattern
"grid" view for blueprint (overlay)
rotate = 4 for the price of 1
(2? including mirrored?) Extra tile looks for showing "selection"
SHIFT + SPACE = open grid (outside of editing -> bind also works inside editing)

Collision check & Warn/Error
    [Optimization]
	- scan full blueprint on edit?
	- only check selection while editing/moving?
	-- break down in to grid of grids, check which inside/overlap... too optimized?

- Can extend blueprints past original size (without using keyboard to move stuff off-canvas)
 
- Canvas Zoom?!?/pan
- Q = copy, right click = pick up bp in to hand (and remove from BP)??
- add "garbage bin" nearby to clean hand?
- sidebar similar to the crafting menu, to let you pick up single entity blueprints

-------------------------------------------------------------------
-------------------------------------------------------------------
NEW FUNCTIONALITY: EXTENSIBLE BLUEPRINTS
-------------------------------------------------------------------
-------------------------------------------------------------------
KEY:
+ - (similar to landfill, but only in one axis)
Shift+ Shift- (other axis)
Adds blueprint "extension" functionality, to be able to repeat 
    a "marked" part/all in both x and y axes
 - Allow varying amounts of added segments per button to mod settings?
-------------------------------------------------------------------
-------------------------------------------------------------------
LOCKED: LAYERS / Another Dimension
-------------------------------------------------------------------
-------------------------------------------------------------------
place wires on bp?!?!??!?!?!?
change assembler machine recipes on bp??
change chest "requests/size... etc" in Bp?

Haha! That's the spirit. If you're really aiming for that large scale editing it sounds more and more realistic to use an special surface for it. This would for example solve the zoom/scroll issue instantly. And you don't have to attempt to fuck around with what would become a huge amount of gui code just to show a basic representation of a BP. Also placing BP inside BP would become trivial as you can just pop it down. If you use invisible ground tiles and a god-controller (i.e. remove "the guy walking around" like in sandbox scenario) it would almost look like a real blueprint. Throw in .active=false on all placed entities to stop the animations or inserters from grabbing shit. This would also allow editing recipies/pasting settings on entities easily without any extra code from your side. So the only thing left to do would be your sidebars and a method for the player to "grab" free items to place into the blueprint.
It would solve zoom/scroll, but it would actually make other features I'd planned harder, like how to put markers for the "extensible" part of the blueprints. Another thing, is I'm not sure how I'd manage the location of all the objects yet. Then again, you could add extra "selection tools" to highlight a bunch of entities, or even cludge a drag-and-drop (hovering over an item gives the ghost in your hand if "natural mouse" tool is selected. drag, but don't give an "area" indication. on mouse release, selection tool end location is used to move object that was "dragged")
Also placing a blueprint in an existing blueprint is actually pretty easy, and I've more or less done the code for that already. Except, the player has to manage "overlapping". Might work better in the person mode though.

I think a cool solution would be... to have both! And let people choose! With a button. And have a selectable "default", so that they don't have to faff around.

Physical:
How do we determine locations???
Switch buttons Physical <-> Chalkboard
Physical = new dimension
Lab floor tiling
Automatic grid (shift space)
Free zoom.
Drag and drop?!? (new select tool)
Free collision.
Free wires
Free Assembler recipes
Free change chest requests
Free rotation single (complicated multiple?)

LOCKED: ADVANCED COMMANDS

- Add drag-and-drop moving to blueprints?!? ("pick up" from blueprint, and send to garbage, or "re place", removing from hand??)

Nice to haves?:

Figure out how to stop players moving gui / lock to gui / rebuild gui

SHIFT + SPACE = open grid!!!

-------------------------------------------------------------------
Boredom backlog:
Figure out how to stop player moving window / warn them
is there an order things are built if they're duplicate? (will that matter if there are "markers"?) (not that important)
-------------------------------------------------------------------
-------------------------------------------------------------------
Discards:
Find out how to tell mouse location? (impossible)
Use Stdlib? nah. Too much time to learn, and not enough classes. Plus more fun to do my own style. And own license ^_^.
Can on "tick"/confirm event tell us which blueprint was being edited?? nope.
Vectors need to stay as mutable, because of game-type nature :(.
logger? take from stdlib?? (nah, doesn't have features I need/want). And wanna keep that fukken sweet license.
Check "blueprint tick" is on the correct ui?!? (difficult - impossible. it just gives player ID)
Obj:method = method??? -- nope, doesn't work.
    -Test if we can get an actual blueprint pointer from "blueprint currently open" editing menu? Nope.
    /c game.player.print(game.player.opened)
Any way to "hold" a blueprint myself (eg: FOreman/kellogs hold in view??)
Look at code for foreman(nope, chuck testa. Also, string var. Doesn't hold lua) / extra toolbelts? (not even close)

    - Try to find a way to "add an extra (invisible?) inventory"
Possibly invisible inventory?
new plane of existence for player -> storage item (chest?) -> save location. = editing blueprint???
overly complicated?!?
data:extend{{ --WARNING: contains three rolls of ducktape in an attempt to make the box invulnerable
    type = "container",
    name = "bigfootmechs-super-secret-chest",
    icon = "__base__/graphics/icons/wooden-chest.png", --icon is required, content is irrelevant for this mod
    flags = {"not-on-map"},
    max_health = -1, --negative health should make the chest invulnerable
    collision_mask = {}, --collide with no other layer
    collision_box = nil, --explicitly no boxes
    selection_box = nil,
    resistances = {{type = "fire", percent = 100 }}, --flamethrowers can damage objects without a collision box
    order = 'z',
    inventory_size = 20,
    picture =
    { filename = "__core__/graphics/empty.png", --base game comes with an invisible graphic, neat!
      width    = 1,
      height   = 1,
      },
    }}
    
Editing screen open AND not editing = start editing that??? - will that give us a pointer to inventory??????? Nope. Says nil for editing open. Can only tell if it's item, or generic types

Shift-N "clears" pipette after adding new blueprint? (nah. people might want to add multiple?)

Specifically don't delete "starting blueprint", create one called "incomplete" / "editing", and use that?? (nope, we don't want to fuck with the name text)

Faster and somewhat cleaner?:
ON PUSH TO UI, DESTROY BLUEPRINT I MADE!!!
On "complete", keeps in hand
ERROR: Why is destruction not working? :( (UI depends on object existing?). Shit.

Update is_editing to include screen open? Slightly different semantics. But added to API, because it's useful.

vector dot product (aTb, not sure how useful) vs cross product (3d space orthogonality of 2 vectors = 3rd dimension?)??

Force screen to stay open until done editing? ("stateless" storage)(locks player out of functionality of normal game?) - not feisible for now


VERSATILE (implement later?): store "editing" blueprint in inventory
cons:
    confusion between which one is the "real" BP for player
    have to write extra function to "search" inventory
    performance cost?
    if someone has "zapper" mod, will destroy blueprint on dump to inventory
pros: if we decide it's safe, can keep a hold of original blueprint instead of making a copy?
    allows for multiple blueprint "places" before having to get it out again.
    
If we take pointer to blueprint from inventory, does that change, based on inventory layout??
    
is there a "player rotate" event?!?
Yes, but only if player actually rotated an in-game entity.

    pseudotable -> all inherit
    "fromtable" just instantiates existing table (incorporate in to copy??)
	-- not effectively viable. No economical way to create "interface" from which ALL methods must be replaced
	
hand method names: "expel"? wash? empty?let go?

On editing, calculate blueprint bounding box, and fill tiles with lab tiling? (no, might not be desirable)



Logger
    Logger class "debug" settable field (global esentially)
    Logger class attached on "class new" or "class extends", with type as argument.
    Log player format(method) [id]name

    log.info(normal stuff)
    log.debug(trying stuff)
        if(logger.debug)
            {}any string concat/operations
        end
    log.error(something fucked up)
Actually, game logger seems to work fine. I can have a global "debug" option though, if I wanted to
    have specific "debug" log items.

On editing, calculate blueprint bounding box, and fill tiles with lab tiling? 
    (no, player might not want it?)

Ctrl-A = select all? useful? How is that different to "no selection"? (not enough 
    significant difference?)
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
New Questions: 
-------------------------------------------------------------------
is there an existing "on player edits BP" action? 
try: 	
defines.input_action.open_blueprint_record	
defines.input_action.update_blueprint_shelf
Looks constrained to LuaPermissionGroup
Anything we can do to look at "opening inventory"?
Long:
Can we request it in modding help?

How does picker change what's displayed next to mouse?

does selection work on hotbar/toolbelt? (don't think so?)
Does selection work on blueprint items???

Is it possible to open another player's inventory??? 
/c game.player.opened = game.player


What happens to blueprint element numbering, when an element is removed?!?!?

What happens if we select book?

Test: metatables erased on game save?

Is there a way to hold down button (keep moving right) without using "ontick"? Is there even with ontick?
Is there a way to detect if a button is currently being held down???

Can we force a different import / change import for testing in Lua?
require () -> change it
-> changed in test

Does blank string label overwrite a name?

What happens if you try to pipette clear on an empty hand?
What type is an empty hand stack?
What happens if you try to pipette clear a full hand with space in inventory?
What happens if you try to pipette clear a full hand with no space in inventory?
What happens if you try to pipette clear a full hand with space only in toolbar?

What happens if player "clears" an element of a blueprint he's editing, in the game editor? (probably ignored? does it have to be confirmed?)

What happens on commands if we don't have blueprint in hand??

can we fuck up blueprints by changing tables? Are they all pointers? Do they deepcopy at the C-lua interface?

Can you get rotation of entity/blueprint from hand?
Can you get collision_box from blueprint/entity?
If you can't get collision_box from blueprint, can you get entity, from blueprint, then get collision?

Compatibility?
MOOVE
if not editing, or not open -> don't do anything (or show up text?)
See what dollies does. (moves both - warn player? - force no mouseover_selection, and warn?)

What happens if blueprint has elements, but no tiles, name, or icons? (icons = reset to empty?)

Can "selection" see moused over blueprint entities (little white boxes)?

Can we add "ghost" to blueprint, to substitute for selection??

Can we tint a building colour in blueprint?

Can we add the white selection outline?
Can we modify that? tint/dotted?

Do "entity numbers" affect draw order/visibility?

Can we use "swap" to steal an object from the game to keep for editing display??
-------------------------------------------------------------------
-------------------------------------------------------------------
Ideas: 
-------------------------------------------------------------------

multithread movement calculations?
check out profiler http://luaprofiler.luaforge.net/index.html