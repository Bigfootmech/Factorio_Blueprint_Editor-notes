How to add things to the PATH environment variable in windows:

right click "My computer" -> properties ->
    advanced system settings -> environment variables
    
Then you have a PATH for system, and one for user. Either is good.

EACH TIME YOU ADD SOMETHING TO PATH, YOU HAVE TO RESTART CMD FOR IT TO REGISTER!!!

------------------------------------- INSTALLATION -------------------------------------


Install Tortoisegit (or favourite git sync tool) https://tortoisegit.org/download/
    (you might separately need to install git, and add it to path)
    
Install Lua Eclipse (or favourite dev environment) https://www.eclipse.org/ldt/

Install Python (for deployment) https://www.python.org/ -> downloads -> latest windows installer
    Add the Python install folder to your PATH environment variable
     > ;C:\Program Files\Python36\
     
    OPTIONALLY:
    Create batch files called "py.bat" inside 
     > C:\Program Files\Python36
    containing
     > python %*
    This will redirect py in the console to python, which means you have to type less/remember less on a regular basis.

Install Ruby (for cucumber) 
    https://rubyinstaller.org/downloads/ (allow putting ruby in your PATH)
Install Ruby gems (distribution/source package for ruby, similar to Pip for python, and LuaRocks for Lua)
    https://rubygems.org/pages/download
    as it says, DL the file, unzip it (ie: C:\rubygems-2.7.1)
    in command line, run 
     > ruby setup.rb
    add the binary to PATH
     > ;C:\rubygems-2.7.1\bin
Install Cucumber
     > gem install cucumber
     
Install MinGW (or a favourite compiler), and add it to PATH
     > ;C:\MinGW\bin
 
Install Lua version 5.2 source code (yes. this is a bitch.)
    https://stackoverflow.com/questions/16641826/how-do-i-build-lua-for-windows-using-mingw-and-msys
    https://www.lua.org/ftp/ -> unzip to anywhere (it has a containing folder)
    cd in to the containing folder, or move the contents of the containing folder to, ie: C:\lua
    from command line, run
     > mingw32-make PLAT=mingw
    in that folder. Lua binaries should be somewhere inside src now.
    
    Create a LUA_HOME Environment variable, for where you installed it, for easy reference later
     > LUA_HOME = C:\lua\src
    Add the src folder to PATH (LUA_HOME must be visible, so you can't add this to system vars,
        if home is a user var)
     > ;%LUA_HOME%
    
Install LuaRocks (this is also not the most fun)
    Download Luarocks binary https://luarocks.github.io/luarocks/releases/ (latest win32.zip)
    Open command window -> navigate to unzipped folder, and run command:

     > install /MW
     
     or, if you have a microsoft c++ compiler installer with "cl" in the path, and don't want to use ming,
     
     > install
     
     /F to force reinstall

    Add the luarocks to PATH
     > ;C:\Program Files (x86)\LuaRocks
    Add where rocks (busted,cucumber) put their binaries to PATH as well
     > ;%LUA_HOME%/systree/bin
     Add lua rocks path to LUA_PATH environment variable
     > ;%LUA_HOME%/systree/share/lua/5.2/?.lua
    Add lua dlls folder to LUA_CPATH
     > ;%LUA_HOME%/systree/lib/lua/5.2/?.dll
     
In a new command window, install the rocks you'll need:
 > luarocks install luaunit
 > luarocks install serpent
 > luarocks install faketorio
 > (optional) luarocks install busted

Install Lua Cucumber with luarocks https://github.com/cucumber/cucumber-lua
 > luarocks build https://raw.githubusercontent.com/Bigfootmech/cucumber-lua/master/cucumber-lua-0.0-2.rockspec
 (original: https://raw.github.com/cucumber/cucumber-lua/master/cucumber-lua-0.0-2.rockspec, but 
    it was failing)

DONE INSTALLING! WOOH. THAT TOOK SOME TIME.

You should now in theory be able to play with the project at will.




------------------------------------- BASIC SETUP -------------------------------------



Now I'll go through the process of setting eclipse up in case you still don't know what's going on.
Though most of this will be personal preference.

(hint: you can substitute %USERPROFILE% with C:\Users\<your username>, or in cmd run
     > echo %USERPROFILE%
    to see where it points)

Open LuaEclipse, and Create a "Workspace", ie: %USERPROFILE%/workspaceLua
Create a project folder, ie: 
 > %USERPROFILE%/workspaceLua/BPEdit

Inside your new folder, right click, and in your context menu, you should see "TortoiseGit"
    and above it Git create..., and Git Clone above that. This is the one is the one you want.
 > Git Clone
 
    There are only two fields you're concerned with.
    URL:
         > https://github.com/Bigfootmech/Factorio-Blueprint-Editor.git
         
        or, if you want to use an SSH key instead of entering username & password every time.
        Get the Putty package (includes PuttyGen for creating SSH keys, and Pageant for "storing" them like on a keychain)
        After generating, and saving a private (ppk), and public (pub) key, change the public key format to
         > ssh-rsa <everything else joined on one line>
        then, after uploading the PUBLIC key only to Github, and putting the private one on the putty keychain, checkout:
         > git@github.com:Bigfootmech/faketorio.git
     
    Directory:
         > the folder you've just made inside the workspace, ie: %USERPROFILE%/workspaceLua/BPEdit
         
    Click OK

    If this doesn't work, you might have to git-fork my project on github, and substitute my username for yours in the link
        (you definitely won't be able to push directly to my one, but can to your one)

Open Eclipse (Lua Development Tools) back up again, and File-> import the project if it's not visible in the workplace.

Then have a look in build.py/setup.py, and find the "source" folders, ie:
src_folder = "./src/main/lua/"
test_folder = "./src/test/lua/"
integration_test_folder = "./src/it/spec/"

In eclipse, right click each of these -> Build Path -> Use as Source Folder
    
    To test that this has worked, go in to tests, and open one at random, then right click on a file,
        or inside the edit window with a test file open, and click
         > Run As -> Lua Application
        this should then run the test set, and output info in the console.
    

 
------------------------------------- CUSHTY SETUP -------------------------------------



I made a hack, this will allow you to deploy straight to your Factorio mods folder.
    I might be able to get rid of this in the future.
 > DEV_ENVIRONMENT = %USERPROFILE%/workspaceLua/BPEdit
 
Create Links to desktop/place you're working, to make it easier to use
 > Right click your Factorio Mods folder %USERPROFILE%/AppData/Roaming/Factorio/mods/
    , and "send to desktop (create link)"
 > Do the same for your project folder (ie %USERPROFILE%/workspaceLua/BPEdit)
 > Do the same for build.py in your project folder, then edit the shortcut
    , by clicking "properties", and replace target with
 > "C:\Program Files\Python36\python.exe" "%USERPROFILE%/workspaceLua/BPEdit/build.py"
    Then go back in to properties -> Advanced -> Tick "run as administrator"
    This will allow the build script to create "links" from your Factorio/mods folder back to your
        dev environment, so that you don't have to redeploy, unless you change keybinds

You should now be able to click your "build" shortcut.

This will test, and build the project (result files are in "Target" in the project folder)
As well as deploying to your mods folder in a clever way, if you allowed admin permissions.
